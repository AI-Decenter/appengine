name: CI

on:
  push:
    branches: [ main, feat/**, fix/** ]
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # nightly full run

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  # Reuse a single logical DB across tests (our harness truncates tables per test state)
  DATABASE_URL: postgres://aether:postgres@localhost:5432/aether_test
  POSTGRES_PASSWORD: postgres
  AETHER_TEST_SHARED_POOL: '1'
  AETHER_TEST_MAX_CONNS: '12'
  # Provide deterministic AWS context & disable metadata to avoid network stalls
  AWS_EC2_METADATA_DISABLED: 'true'
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: dummy
  AWS_SECRET_ACCESS_KEY: dummy
  # Toggle to run feature-gated S3 tests in non-PR full-tests (enabled by default)
  AETHER_ENABLE_S3_FULL_CI: '1'

jobs:
  fast-tests:
    name: Fast Tests (PR / branch)
    if: ${{ github.event_name != 'schedule' }}
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      RUSTC_WRAPPER: sccache
      RUSTFLAGS: -C debuginfo=1
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: aether
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd="pg_isready -U aether" --health-interval=5s --health-timeout=5s --health-retries=20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90.0
          components: clippy,rustfmt

      - name: Install sccache
        uses: taiki-e/install-action@v2
        with:
          tool: sccache

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'schedule' }}

      - name: Fast test suite (no S3 features)
        env:
          AETHER_FAST_TEST: '1'
          EXPECT_FAST: '1'
          # Use per-test DB pools to avoid runtime shutdown issues
          AETHER_TEST_SHARED_POOL: '0'
          # Provide dummy tokens to auth-aware tests (middleware defaults to optional auth)
          AETHER_API_TOKENS: t_admin:admin:alice,t_reader:reader:bob
        run: |
          cargo test -p control-plane --lib -- --nocapture
          cargo test -p control-plane --test sbom_manifest_enforcement -- --nocapture
          # (Optionally) add other crate smoke tests here
      - name: Network stack regression check
        run: |
          bash scripts/check-network-stack.sh
      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny
      - name: Cargo Deny (bans)
        run: cargo deny --all-features check bans

      - name: Clippy (warnings as errors)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: sccache stats
        run: sccache --show-stats || true

  full-tests:
    name: Full Tests (main / nightly / manual)
    needs: [fast-tests]
    # Runs automatically on:
    #  - Nightly schedule
    #  - Manual dispatch
    #  - Push to main
    #  - Any pull_request (always run full suite for PRs)
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      RUSTC_WRAPPER: sccache
      RUSTFLAGS: -C debuginfo=1
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: aether
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd="pg_isready -U aether" --health-interval=5s --health-timeout=5s --health-retries=20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90.0
          components: clippy,rustfmt

      - name: Install sccache
        uses: taiki-e/install-action@v2
        with:
          tool: sccache

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Full workspace tests (PR-safe)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          # Tokens available for tests that opt-in to auth; enforcement remains opt-out by default
          AETHER_API_TOKENS: t_admin:admin:alice,t_reader:reader:bob
          # Use per-test DB pools to avoid runtime shutdown issues
          AETHER_TEST_SHARED_POOL: '0'
        run: |
          cargo test --workspace -- --nocapture --test-threads=4

      - name: Full workspace tests (all features)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # Tokens available for tests that opt-in to auth; enforcement remains opt-out by default
          AETHER_API_TOKENS: t_admin:admin:alice,t_reader:reader:bob
          # Use per-test DB pools to avoid runtime shutdown issues
          AETHER_TEST_SHARED_POOL: '0'
        run: |
          cargo test --workspace --all-features -- --nocapture --test-threads=4

      - name: S3 compile check (non-PR)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cargo check -p control-plane --features s3

      - name: Start MinIO (non-PR)
        if: ${{ github.event_name != 'pull_request' && env.AETHER_ENABLE_S3_FULL_CI == '1' }}
        run: |
          docker rm -f ci-minio 2>/dev/null || true
          docker run -d --name ci-minio -p 9000:9000 \
            -e MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID:-minioadmin} \
            -e MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY:-minioadmin} \
            minio/minio:latest server /data --console-address :9001
          for i in {1..40}; do
            curl -sf http://127.0.0.1:9000/minio/health/ready && break
            sleep 1
            if [ "$i" = "40" ]; then echo "MinIO not ready"; exit 1; fi
          done
          curl -sSL -o mc https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set local http://127.0.0.1:9000 ${AWS_ACCESS_KEY_ID:-minioadmin} ${AWS_SECRET_ACCESS_KEY:-minioadmin}
          ./mc mb --ignore-existing local/${AETHER_ARTIFACT_BUCKET:-artifacts}

      - name: Control-plane S3 tests (opt-in)
        if: ${{ github.event_name != 'pull_request' && env.AETHER_ENABLE_S3_FULL_CI == '1' }}
        env:
          # Provide tokens for tests that enable auth enforcement explicitly
          AETHER_API_TOKENS: t_admin:admin:alice,t_reader:reader:bob
          # Use per-test DB pools to avoid runtime shutdown issues
          AETHER_TEST_SHARED_POOL: '0'
          # S3/MinIO settings
          MINIO_TEST: '1'
          AETHER_STORAGE_MODE: s3
          AETHER_ARTIFACT_BUCKET: artifacts
          AETHER_S3_ENDPOINT_URL: http://localhost:9000
        run: |
          cargo test -p control-plane --features s3 -- --nocapture --test-threads=2

      - name: Clippy (strict)
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Doc build
        run: cargo doc --no-deps --workspace

      - name: Publish test report summary
        if: always()
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "Fast mode: PR job; Full mode: main/nightly/manual." >> $GITHUB_STEP_SUMMARY
          echo "DB URL: $DATABASE_URL" >> $GITHUB_STEP_SUMMARY

  benchmarks:
    name: Benchmarks (enforced)
    needs: [full-tests]
    # Run on PRs and main, and on scheduled/nightly
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90.0

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Run benches (aether-cli)
        env:
          RAYON_NUM_THREADS: '2'
          RUST_LOG: 'off'
        run: |
          cargo bench -p aether-cli --bench pack_bench --bench stream_bench --quiet

      - name: Compare to baselines (fail on regression)
        env:
          # Allow mild variance on shared runners for duration metrics
          DURATION_TOLERANCE: '0.22'
        run: |
          # Packaging vs committed baseline
          bash scripts/check-bench-regression.sh \
            crates/aether-cli/benches/baseline/bench-pack.json \
            crates/aether-cli/target/benchmarks/bench-pack.json
          # Streaming vs committed baseline
          bash scripts/check-bench-regression.sh \
            crates/aether-cli/benches/baseline/bench-stream.json \
            crates/aether-cli/target/benchmarks/bench-stream.json

      - name: Upload bench artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bench-jsons-enforced
          path: |
            crates/aether-cli/target/benchmarks/*.json
            target/criterion/**
