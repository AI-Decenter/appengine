name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: aether_dev
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 5s --health-timeout 5s --health-retries 10
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.90.0
          components: clippy
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -U postgres && break
            sleep 1
          done
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres
      - name: Generate Cargo.lock (fetch dependencies)
        run: cargo fetch
      - name: Run migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/aether_dev
        working-directory: crates/control-plane
        run: sqlx migrate run
      - name: Build
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/aether_dev
        run: cargo build --workspace --all-targets --release
      - name: Clippy
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/aether_dev
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings
      - name: SQLx Prepare (Offline)
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/aether_dev
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          cargo sqlx prepare --workspace -- --all-targets
      - name: Tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/aether_dev
        run: cargo test --workspace --all-features -- --nocapture
      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny
      - name: Cargo Deny
        run: cargo deny check
      - name: ShellCheck dev.sh
        run: sudo apt-get update && sudo apt-get install -y shellcheck && shellcheck dev.sh || true
